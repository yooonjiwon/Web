package com.dieat.dao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

//@Repository(value = "schedulereDao")
public class SchedulereDao {
	
	@Autowired
	@Qualifier("boardMapper")
	private BoardMapper boardMapper;

	public int insertBoard(Board board) {
		//board.getBoardNo() ==> 0 //지정되지 않은 상태
		boardMapper.insertBoard(board);
		return board.getBoardNo(); //board.getBoardNo() ==> 등록된 글번호
	}

	public List<Board> selectBoard() {
		List<Board> boards = boardMapper.selectBoardList2();		
		return boards;
	}

	public Board selectBoardByBoardNo(int boardNo) {
		Board board = boardMapper.selectBoardByBoardNo(boardNo);
		return board;//조회 성공하면 Board 아니면 null
	}
	
	public Board selectBoardByBoardNo2(int boardNo) {
		
		//Board board = boardMapper.selectBoardByBoardNo2(boardNo);
		Board board = boardMapper.selectBoardByBoardNo3(boardNo);
		
		return board;
	}

	public void updateBoard(Board board) {
		boardMapper.updateBoard(board);
	}

	public void deleteBoard(int boardNo) {
		boardMapper.deleteBoard(boardNo);
	}

	public void updateReadCount(int boardNo) {
		boardMapper.updateReadCount(boardNo);
	}

	public void insertReply(Board board) {
		boardMapper.insertReply(board);
		
	}

	public void updateStep(int groupNo, int step) {
		HashMap<String, Object> params = new HashMap<>();
		params.put("groupno", groupNo);
		params.put("step", step);
		
		boardMapper.updateStep(params);
	}
	
	public List<Board> selectBoardList2(int first, int last) {
		
		HashMap<String, Object> params = new HashMap<>();
		params.put("first", first);
		params.put("last", last);
		
		List<Board> boards = boardMapper.selectBoardList(params);
		
		return boards;
	}
	
	public int getBoardCount() {
		int count = boardMapper.selectBoardCount();
		return count;
	}

	//////////////////////////
	
	public void insertBoardAttach(BoardAttach attach) {
		boardMapper.insertBoardAttach(attach);
	}
	
	public List<BoardAttach> selectBoardAttachByBoardNo(int boardNo) {
		List<BoardAttach> attachments = boardMapper.selectBoardAttachByBoardNo(boardNo);
		return attachments;		
	}
	
	public BoardAttach selectBoardAttachByAttachNo(int attachNo) {
		BoardAttach attachment = 
				boardMapper.selectBoardAttachByAttachNo(attachNo);
		return attachment;
		
	}
	
	////////////////////////
	
	public void insertComment(BoardComment comment) {
		
		boardMapper.insertComment(comment);
	}
	
	public void updateComment(BoardComment comment) {
		
		boardMapper.updateComment(comment);
	}
	
	public void deleteComment(int commentNo) {
		
		boardMapper.deleteComment(commentNo);
	}

	public List<BoardComment> selectCommentByBoardNo(int boardNo) {
		List<BoardComment> comments = 
				boardMapper.selectCommentByBoardNo(boardNo);
		
		return (ArrayList<BoardComment>) comments;
	}
	


}
